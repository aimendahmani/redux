const redux = require('redux')
const createStore = redux.createStore 
const applyMiddleware = redux.applyMiddleware
const thunkMiddleware = require('redux-thunk').default

// action
const FETCH_USERS_REQUEST = 'FETCH_USERS_REQUEST'
const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS'
const FETCH_USERS_FAIL = 'FETCH_USERS_FAIL'

function fetchUsersRequest = () => {
return {
type:FETCH_USERS_REQUEST,
}
}

function fetchUsersSuccess = users => {
return {
type:FETCH_USERS_Success,
payload: users,
}
}

function fetchUsersFail = error => {
return {
type:FETCH_USERS_Fail,
payload: error,
}
}
// state 
const initialState = {
loading:false,
users:[],
error:'',
}

// reducer
const userReducer = (state=initialSate, action) => {
switch(action.type){
case FETCH_USERS_REQUEST : return {
...state //javascript es6 spread operator to make copy of the state
loading : true,
users:[],
error:'',
}
case FETCH_USERS_SUCCESS : return {
loading : false,
users: action.payload,
error:'',
}
case FETCH_USERS_FAIL : return {
loading : false,
users: [],
error:action.payload,
}
default : return state
}
}

const fetchUsers = () =>{
  return function(dispatch){
    dispatch(fetchUsersRequest())
    axios.get('https://jsonplaceholder.typicode.com/users').then(response =>{
      const users = response.data
      dispatch(fetchUsersSuccess(users))
    }).catch(error =>{
        dispatch(fetchuUsersFail(error.message))
    })
  }
}

const store = createStore(userReducer, applyMiddleware(thunkMiddleware))
store.subscribe(()=>{console.log(store.getState())})
store.dispatch(fetchUsers())
